{"version":3,"sources":["components/AboutMe.tsx","components/Contact.tsx","components/Projects.tsx","components/Home.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AboutMe","Contact","Projects","Home","className","href","target","rel","useStyles","makeStyles","theme","createStyles","root","flexGrow","Header","classes","AppBar","position","style","backgroundColor","color","Toolbar","display","justifyContent","Button","component","props","to","particlesOptions","particles","number","value","density","enable","value_area","App","exact","path","params","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAWeA,G,MATW,WAExB,OACE,6BACE,2CCKSC,EATW,WAExB,OACE,6BACE,yCCKSC,EATY,WAEzB,OACE,6BACE,6CCcSC,EAlBQ,WAErB,OACE,6BACE,2CACA,qFACA,yBAAKC,UAAU,wBACX,uBAAGC,KAAK,4CAA4CC,OAAO,SAASC,IAAI,uBACtE,uBAAGH,UAAU,2BAEf,uBAAGC,KAAK,gCAAgCC,OAAO,SAAQC,IAAI,uBACzD,uBAAGH,UAAU,4B,wCCNnBI,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,QAsBDC,EAjBU,WACvB,IAAMC,EAAUP,IAEhB,OACE,yBAAKJ,UAAWW,EAAQH,MACtB,kBAACI,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAO,CAACC,gBAAiB,cAAeC,MAAO,YACvE,kBAACC,EAAA,EAAD,CAASH,MAAO,CAACI,QAAS,OAAQC,eAAgB,iBAChD,kBAACC,EAAA,EAAD,CAAQJ,MAAM,UAAUK,UAAW,SAAAC,GAAK,OAAI,kBAAC,IAAD,eAAMC,GAAI,KAASD,MAA/D,QACA,kBAACF,EAAA,EAAD,CAAQJ,MAAM,UAAUK,UAAW,SAAAC,GAAK,OAAI,kBAAC,IAAD,eAAMC,GAAI,aAAiBD,MAAvE,YACA,kBAACF,EAAA,EAAD,CAAQJ,MAAM,UAAUK,UAAW,SAAAC,GAAK,OAAI,kBAAC,IAAD,eAAMC,GAAI,YAAgBD,MAAtE,YACA,kBAACF,EAAA,EAAD,CAAQJ,MAAM,UAAUK,UAAW,SAAAC,GAAK,OAAI,kBAAC,IAAD,eAAMC,GAAI,YAAgBD,MAAtE,eCdJE,EAAmB,CACvBC,UAAW,CACTC,OAAQ,CACNC,MAAO,GACPC,QAAS,CACPC,QAAQ,EACRC,WAAY,QAsBLC,EAhBO,WAEpB,OACE,kBAAC,IAAD,KACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,IAAIZ,UAAWtB,IACjC,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,YAAYZ,UAAWvB,IACzC,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,WAAWZ,UAAWzB,IACxC,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,WAAWZ,UAAWxB,IACxC,kBAAC,IAAD,CAAWG,UAAU,eAAekC,OAAQV,OCrBhCW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.129cb2e0.chunk.js","sourcesContent":["import React from 'react';\n\nconst AboutMe: React.FC = () => {\n  \n  return (\n    <div>\n      <h1>About Me</h1>\n    </div>\n  );\n}\n\nexport default AboutMe;","import React from 'react';\n\nconst Contact: React.FC = () => {\n  \n  return (\n    <div>\n      <h1>Contact</h1>\n    </div>\n  );\n}\n\nexport default Contact;","import React from 'react';\n\nconst Projects: React.FC = () => {\n  \n  return (\n    <div>\n      <h1>Projectssss</h1>\n    </div>\n  );\n}\n\nexport default Projects;\n","import React from 'react';\n\nconst Home: React.FC = () => {\n\n  return (\n    <div>\n      <h1>Conor Burke</h1>\n      <h2>Software Engineer. Web Develper. AI Graduate Student.</h2>\n      <div className=\"icon-container icons\">\n          <a href=\"https://www.linkedin.com/in/conorburke89/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className=\"fab fa-linkedin fa-4x\"></i>\n          </a>\n          <a href=\"https://github.com/conorburke\" target=\"_blank\"rel=\"noopener noreferrer\">\n            <i className=\"fab fa-github fa-4x\"></i>\n          </a>\n        </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n  }),\n);\n\nconst Header: React.FC = () => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" style={{backgroundColor: 'transparent', color: '#f7f7f7'}}>\n        <Toolbar style={{display: 'flex', justifyContent: 'space-around'}}>\n          <Button color=\"inherit\" component={props => <Link to={'/'} {...props}/>}>Home</Button>\n          <Button color=\"inherit\" component={props => <Link to={'/projects'} {...props}/>}>Projects</Button>\n          <Button color=\"inherit\" component={props => <Link to={'/aboutme'} {...props}/>}>About Me</Button>\n          <Button color=\"inherit\" component={props => <Link to={'/contact'} {...props}/>}>Contact</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport Particles from 'react-particles-js';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport './App.css';\nimport AboutMe from './components/AboutMe';\nimport Contact from './components/Contact';\nimport Projects from './components/Projects';\nimport Home from './components/Home';\nimport Header from './components/Header';\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 89,\n      density: {\n        enable: true,\n        value_area: 1000\n      }\n    }\n  }\n}\n\nconst App: React.FC = () => {\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Header />\n        <Route exact path='/' component={Home} />\n        <Route exact path='/projects' component={Projects} />\n        <Route exact path='/aboutme' component={AboutMe} />\n        <Route exact path='/contact' component={Contact} />\n        <Particles className=\"particles-js\" params={particlesOptions} />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}